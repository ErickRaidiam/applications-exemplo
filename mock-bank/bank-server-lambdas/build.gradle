buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "application"
    id 'jacoco'
    id 'groovy'
    id "org.owasp.dependencycheck" version "7.1.0.1"
    id "io.micronaut.application" version "3.2.2"
}

def props = new Properties()
file("version.properties").withInputStream { props.load(it) }
String buildNumber = System.getenv("BUILD_NUMBER")

version = buildNumber ? "${props.VERSION}.${buildNumber}" : "${props.VERSION}-SNAPSHOT"
group "com.raidiam.trustframework.bank"

dependencyCheck {
    formats = ['HTML','XML']
}

repositories {
    mavenLocal()
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

micronaut {
    version "3.4.3"
    runtime "lambda"
    runtime "netty"
    testRuntime "spock2"
    processing {
        incremental(true)
        annotations("com.raidiam.trustframework.directory.*")
    }
}

ext {
    swaggerVersion = "1.0.1-SNAPSHOT"
}

dependencies {

    //These must be above the micronaut stuff, so lombok can generate the boilerplate
    //for micronaut/hibernate to look at
    implementation 'org.projectlombok:lombok:1.18.22'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    implementation platform('com.amazonaws:aws-java-sdk-bom:1.12.169')
    implementation platform('com.amazonaws:aws-xray-recorder-sdk-bom:2.11.0')

    annotationProcessor "io.micronaut.data:micronaut-data-processor"
    annotationProcessor "io.micronaut.security:micronaut-security-annotations"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut:micronaut-inject-java"

    annotationProcessor "io.micronaut:micronaut-http-validation"

    implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
    implementation 'com.nimbusds:nimbus-jose-jwt:9.20'
    implementation 'org.postgresql:postgresql'
    implementation "io.micronaut.security:micronaut-security"
    implementation "com.google.guava:guava:31.1-jre"

    implementation "com.raidiam.trustframework.mockbank:mockbank-swagger:${swaggerVersion}"

    implementation 'com.amazonaws:aws-java-sdk-api-gateway'
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-core")
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-aws-sdk")
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-aws-sdk-instrumentor")
    runtimeOnly("com.amazonaws:aws-xray-recorder-sdk-sql-postgres")

    runtimeOnly 'org.jlib:jlib-awslambda-logback:1.0.0'
    implementation 'net.logstash.logback:logstash-logback-encoder:7.0.1'

    implementation 'io.micronaut.aws:micronaut-function-aws-custom-runtime'
    implementation 'io.micronaut.aws:micronaut-function-aws-api-proxy'

    developmentOnly "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation 'io.micronaut.data:micronaut-data-hibernate-jpa'
    implementation 'io.micronaut.sql:micronaut-hibernate-jpa'

    implementation 'org.hibernate:hibernate-envers:5.6.5.Final'
    implementation "io.micronaut.flyway:micronaut-flyway"

    //runtimeOnly "io.micronaut.configuration:micronaut-jdbc-tomcat"
    implementation 'io.micronaut.sql:micronaut-jdbc-tomcat'

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.1"

    // stick to javax for now
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'javax.persistence:javax.persistence-api:2.2'
    implementation 'javax.transaction:javax.transaction-api:1.3'
    implementation 'javax.inject:javax.inject:1'

    // update to rxjava3 at some point
    implementation 'io.micronaut.rxjava2:micronaut-rxjava2'
    implementation 'io.micronaut.rxjava2:micronaut-rxjava2-http-client'

    implementation 'org.json:json:20211205'

    // force versions for dep check
    implementation 'commons-io:commons-io:2.11.0'


    // -- TEST DEPS

    testAnnotationProcessor 'io.micronaut:micronaut-inject-groovy'
    testImplementation "io.micronaut.test:micronaut-test-spock"
    testImplementation "io.micronaut:micronaut-inject-groovy"

    testImplementation "org.objenesis:objenesis:3.1"
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:spock'
    testImplementation 'org.testcontainers:localstack'
    testImplementation 'org.testcontainers:postgresql'

    testImplementation 'org.mock-server:mockserver-netty:5.12.0'
    testImplementation 'org.mock-server:mockserver-client-java:5.12.0'
    testImplementation 'org.mock-server:mockserver-junit-jupiter:5.12.0'
    testImplementation 'org.mock-server:mockserver-junit-rule:5.12.0'

    testImplementation "com.h2database:h2"
}

test.outputs.upToDateWhen {false}

test {
    useJUnitPlatform()
    beforeTest { descriptor ->
        logger.lifecycle("Running test: ${descriptor}")
    }
    classpath += configurations.developmentOnly
    environment "AWS_XRAY_CONTEXT_MISSING", "LOG_ERROR"
    finalizedBy jacocoTestReport
    maxParallelForks = 2
    jacoco {
        excludes = ['com.raidiam.trustframework.bank.models.*']
    }
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
    minHeapSize = "512m"
    maxHeapSize = "6144m"
}

mainClassName = "com.raidiam.trustframework.bank.Application"

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run {
    classpath += configurations.developmentOnly
    jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/raidiam/trustframework/mockbank/models/**')
        }))
    }
    reports {
        xml.enabled true
    }
}
